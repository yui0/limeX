6c6,7
<  * (Loosly) Based on the FreeType 1.x driver, font_freetype.c.
---
>  * (Loosely) Based on the FreeType 1.x driver, font_freetype.c.
>  * Copyright (c) 2010 Greg Haerr <greg@censoft.com>
28a30
>  * 2.3.9 - works and tested with caching
37d38
< 
39d39
< 
41d40
< 
52a52,59
> #if STANDALONE
> typedef uint32_t COLORVAL;
> COLORVAL winsetfgcolor(PSD psd, COLORVAL color);		// FIXME kluge decls
> void winfillrect(PSD psd, int x, int y, int w, int h);
> #define GdSetForegroundColor	winsetfgcolor
> #define GdFillRect				winfillrect
> #endif
> 
62c69,76
< #define FILL_BACKGROUND_ON_USEBG	1	/* fill background when usebg TRUE*/
---
> /* configurable defaults*/
> #define FILL_BACKGROUND_ON_USE_BG	1	/* fill background when usebg TRUE*/
> #define FACE_CACHE_MAX		3			/* Faces*/
> #define SIZES_CACHE_MAX		5			/* Sizes*/
> #define CACHE_SIZE			(512*1024)	/* Bytes - 512K*/
> #ifndef FREETYPE_FONT_DIR
> #define FREETYPE_FONT_DIR "fonts/truetype"		/* default truetype font directory*/
> #endif
102d115
< 
118d130
< 
134,141d145
< 
< #ifndef FREETYPE_FONT_DIR
< /**
<  * The default Freetype font directory.
<  */
< #define FREETYPE_FONT_DIR "/usr/local/microwin/fonts"
< #endif
< 
150,155d153
< /**
<  * The Freetype 2 font directory.
<  */
< static char *freetype2_font_dir;
< 
< 
158,159c156
< struct freetype2_fontdata_
< {
---
> struct freetype2_fontdata_ {
161,162c158
< 	union
< 	{
---
> 	union {
164,166c160
< 
< 		struct
< 		{
---
> 		struct {
169,172c163,164
< 		}
< 		buffer;
< 	}
< 	data;
---
> 		} buffer;
> 	} data;
179,181c171,173
< struct MWFREETYPE2FONT_STRUCT
< {
< 	PMWFONTPROCS fontprocs;	/* common hdr */
---
> typedef struct {
> 	/* common hdr */
> 	PMWFONTPROCS fontprocs;
187d178
< 
205c196
< };
---
> } MWFREETYPE2FONT, *PMWFREETYPE2FONT;
206a198,199
> PMWFONT freetype2_createfont(const char *name, MWCOORD height, MWCOORD width, int attr);
> static int freetype2_init(PSD psd);
208,210c201,203
< static void freetype2_gettextsize(PMWFONT pfont, const void *text, int cc,
< 		MWTEXTFLAGS flags, MWCOORD *pwidth, MWCOORD *pheight,
< 		MWCOORD *pbase);
---
> void freetype2_gettextsize(PMWFONT pfont, const void *text, int cc,
> 		MWTEXTFLAGS flags, MWCOORD *pwidth, MWCOORD *pheight, MWCOORD *pbase);
> static int freetype2_setfontattr(PMWFONT pfont, int setflags, int clrflags);
214c207
< static void freetype2_setfontsize(PMWFONT pfont, MWCOORD fontsize);
---
> static void freetype2_setfontsize(PMWFONT pfont, MWCOORD height, MWCOORD width);
216,218c209,211
< static void freetype2_setfontattr(PMWFONT pfont, int setflags, int clrflags);
< static PMWFONT freetype2_duplicate(PMWFONT psrcfont, MWCOORD fontsize);
< 
---
> static PMWFONT freetype2_duplicate(PMWFONT psrcfont, MWCOORD height, MWCOORD width);
> static PMWFREETYPE2FONT freetype2_createfont_internal(freetype2_fontdata * faceid,
> 		char *filename, MWCOORD height, MWCOORD width);
223c216
< static MWFONTPROCS freetype2_procs = {
---
> MWFONTPROCS freetype2_fontprocs = {
224a218,221
> #if STANDALONE
> 	freetype2_init,
> 	freetype2_createfont,
> #endif
233c230
< 	freetype2_duplicate,
---
> 	freetype2_duplicate
236,240d232
< 
< static PMWFREETYPE2FONT
< freetype2_createfont_internal(freetype2_fontdata * faceid,
< 			      char *filename, MWCOORD height);
< 
245a238,242
> /**
>  * The default freetype font directory
>  */
> static char *freetype2_font_dir;
> 
306,308c303,304
< freetype2_face_requester(FTC_FaceID face_id,
< 			 FT_Library library,
< 			 FT_Pointer request_data, FT_Face * aface)
---
> freetype2_face_requester(FTC_FaceID face_id, FT_Library library,
> 	FT_Pointer request_data, FT_Face * aface)
318,320c314
< 		   (char)buffer[0], (char)buffer[1],
< 		   (char)buffer[2], (char)buffer[3],
< 		   length); */
---
> 		   (char)buffer[0], (char)buffer[1], (char)buffer[2], (char)buffer[3], length); */
325,326c319
< 		/* DPRINTF("Loading font from file '%s' @ freetype2_face_requester\n", 
< 		   filename); */
---
> 		/* DPRINTF("Loading font from file '%s' @ freetype2_face_requester\n", filename); */
345,347c338
< 	(FTC_CMapCache_Lookup(freetype2_cache_cmap, \
< 	&((pf_)->cmapdesc), \
< 	(ch_)))
---
> 	(FTC_CMapCache_Lookup(freetype2_cache_cmap, &((pf_)->cmapdesc), (ch_)))
350,351c341
< #define LOOKUP_CHAR(pf_,face_,ch_) \
< 	(FT_Get_Char_Index((face_), (ch_)))
---
> #define LOOKUP_CHAR(pf_,face_,ch_) (FT_Get_Char_Index((face_), (ch_)))
361,362c351,352
< int
< freetype_init(PSD psd)
---
> static int
> freetype2_init(PSD psd)
369c359
< 	if ((freetype2_font_dir = getenv("MWFONTS")) == NULL)
---
> 	if ((freetype2_font_dir = getenv("TTFONTDIR")) == NULL)
382,386c372,373
< 	err = FTC_Manager_New(freetype2_library, 3,	/* Faces */
< 			      5,	/* Sizes */
< 			      512 * 1024,	/* Bytes - 512K */
< 			      &freetype2_face_requester, NULL,
< 			      &freetype2_cache_manager);
---
> 	err = FTC_Manager_New(freetype2_library, FACE_CACHE_MAX, SIZES_CACHE_MAX, CACHE_SIZE,
> 		&freetype2_face_requester, NULL, &freetype2_cache_manager);
388,390d374
< 		EPRINTF("Error 0x%x initializing FreeType 2 cache system\n",
< 			err);
< 
393a378
> 		EPRINTF("Error 0x%x initializing FreeType 2 cache system\n", err);
397,398c382
< 	err = FTC_SBitCache_New(freetype2_cache_manager,
< 				&freetype2_cache_sbit);
---
> 	err = FTC_SBitCache_New(freetype2_cache_manager, &freetype2_cache_sbit);
400,401d383
< 		EPRINTF("Error 0x%x initializing FreeType 2 sbit cache system\n", err);
< 
406a389
> 		EPRINTF("Error 0x%x initializing FreeType 2 sbit cache system\n", err);
410,411c393
< 	err = FTC_CMapCache_New(freetype2_cache_manager,
< 				&freetype2_cache_cmap);
---
> 	err = FTC_CMapCache_New(freetype2_cache_manager, &freetype2_cache_cmap);
413,414d394
< 		EPRINTF("Error 0x%x initializing FreeType 2 cmap cache system\n", err);
< 
421a402
> 		EPRINTF("Error 0x%x initializing FreeType 2 cmap cache system\n", err);
436a418
>  * @param width The width of the font, in pixels.
440,441c422,423
< PMWFREETYPE2FONT
< freetype2_createfont(const char *name, MWCOORD height, int attr)
---
> PMWFONT
> freetype2_createfont(const char *name, MWCOORD height, MWCOORD width, int attr)
451,452c433
< 	/* Init freetype library */
< 	if (!freetype_init(NULL))
---
> 	if (!freetype2_init(NULL))
456c437
< 	if (fontname == NULL)
---
> 	if (!fontname)
459,460c440,444
< 	/* check for pathname prefix */
< 	if (strchr(name, '/') != NULL) {
---
> 	/*
> 	 * if name has partial path, use it directly, otherwise
> 	 * prepend freetype default font directory to passed name
> 	 */
> 	if (strchr(name, '/') != NULL)
462c446
< 	} else {
---
> 	else {
468c452
< 	/* check for extension */
---
> 	/* add .ttf if required*/
470c454
< 	    ((strcmpi(p, ".ttf") != 0) && (strcmpi(p, ".pfr") != 0))) {
---
> 	   ((strcmpi(p, ".ttf") != 0) && (strcmpi(p, ".pfr") != 0))) {
472a457
> 
475,476c460
< 	while ( (faceid != NULL) && (0 != strcmpi(faceid->data.filename, fontname)) )
< 	{
---
> 	while ((faceid != NULL) && (0 != strcmpi(faceid->data.filename, fontname)))
478,479c462,463
< 	}
< 	if (faceid == NULL) {
---
> 
> 	if (!faceid) {
481c465
< 		DPRINTF("Nano-X-Freetype2: Adding new font: %s\n", fontname);
---
> 		DPRINTF("freetype2_createfont: adding new font '%s'\n", fontname);
483c467
< 		if (faceid == NULL) {
---
> 		if (!faceid) {
486a471
> 
498c483
< 	} else {
---
> 	} else
500d484
< 	}
506c490
< 	pf = freetype2_createfont_internal(faceid, fontname, height);
---
> 	pf = freetype2_createfont_internal(faceid, fontname, height, width);
521,523c505,506
< 	GdSetFontAttr((PMWFONT) pf, attr, 0);
< 
< 	return pf;
---
> 	pf->fontprocs->SetFontAttr((PMWFONT)pf, attr, 0);
> 	return (PMWFONT)pf;
531a515
>  * @param width The width of the font, in pixels.
534,536c518,520
< PMWFREETYPE2FONT
< freetype2_createfontfrombuffer(const unsigned char *buffer,
< 			       unsigned length, MWCOORD height)
---
> PMWFONT
> freetype2_createfontfrombuffer(const unsigned char *buffer, unsigned size,
> 	MWCOORD height, MWCOORD width)
538,540c522,524
< 	PMWFREETYPE2FONT pf;
< 	freetype2_fontdata *faceid = NULL;
< 	unsigned char *buffercopy;
---
> 		PMWFREETYPE2FONT pf;
> 		freetype2_fontdata *faceid = NULL;
> 		unsigned char *buffercopy;
542c526
< 	assert(buffer);
---
> 		assert(buffer);
544,546c528,529
< 	/* Init freetype library */
< 	if (!freetype_init(NULL))
< 		return NULL;
---
> 		if (!freetype2_init(NULL))
> 				return NULL;
548,550c531,540
< 	faceid = (freetype2_fontdata *) calloc(sizeof(freetype2_fontdata), 1);
< 	if (!faceid)
< 		return NULL;
---
> 		faceid = (freetype2_fontdata *) calloc(sizeof(freetype2_fontdata), 1);
> 		if (!faceid)
> 				return NULL;
> 
> 		buffercopy = (unsigned char *) malloc(size);
> 		if (!buffercopy) {
> 				free(faceid);
> 				return NULL;
> 		}
> 		memcpy(buffercopy, buffer, size);
552,557c542,545
< 	buffercopy = (unsigned char *) malloc(length);
< 	if (!buffercopy) {
< 		free(faceid);
< 		return NULL;
< 	}
< 	memcpy(buffercopy, buffer, length);
---
> 		faceid->isBuffer = TRUE;
> 		faceid->data.buffer.length = size;
> 		faceid->data.buffer.data = buffercopy;
> 		faceid->refcount = 1;
559,567c547,548
< 	faceid->isBuffer = TRUE;
< 	faceid->data.buffer.length = length;
< 	faceid->data.buffer.data = buffercopy;
< 	faceid->refcount = 1;
< 
< 	/*DPRINTF("Font magic = '%c%c%c%c', len = %u @ freetype2_createfontfrombuffer\n", 
< 	   (char)buffercopy[0], (char)buffercopy[1],
< 	   (char)buffercopy[2], (char)buffercopy[3],
< 	   length); */
---
> 		/*DPRINTF("Font magic = '%c%c%c%c', len = %u @ freetype2_createfontfrombuffer\n", 
> 		  (char)buffercopy[0], (char)buffercopy[1], (char)buffercopy[2], (char)buffercopy[3], size); */
569,572c550,552
< 	pf = freetype2_createfont_internal(faceid, NULL, height);
< 	if (!pf) {
< 		free(faceid);
< 	}
---
> 		pf = freetype2_createfont_internal(faceid, NULL, height, width);
> 		if (!pf)
> 				free(faceid);
574c554
< 	return pf;
---
> 		return (PMWFONT)pf;
586a567
>  * @param width   The font width in pixels.
592,593c573
< freetype2_createfont_internal(freetype2_fontdata * faceid,
< 			      char *filename, MWCOORD height)
---
> freetype2_createfont_internal(freetype2_fontdata * faceid, char *filename, MWCOORD height, MWCOORD width)
604c584
< 	if (!pf) {
---
> 	if (!pf)
606,607d585
< 	}
< 	pf->fontprocs = &freetype2_procs;
608a587
> 	pf->fontprocs = &freetype2_fontprocs;
613,614c592,593
< 	pf->imagedesc.width = 0;	/* Will be set by GdSetFontSize */
< 	pf->imagedesc.height = 0;	/* Will be set by GdSetFontSize */
---
> 	pf->imagedesc.width = 0;	/* Will be set by SetFontSize */
> 	pf->imagedesc.height = 0;	/* Will be set by SetFontSize */
616c595
< 	pf->imagedesc.flags = 0;	/* Will be set by GdSetFontAttr */
---
> 	pf->imagedesc.flags = 0;	/* Will be set by SetFontAttr */
618c597
< 	pf->imagedesc.type = 0;	/* Will be set by GdSetFontAttr */
---
> 	pf->imagedesc.type = 0;		/* Will be set by SetFontAttr */
630c609,610
< 			EPRINTF("Nano-X-Freetype2: Can't load font from file \"%s\" - %x\n", filename, error);
---
> 			//EPRINTF("freetype2_createfont_internal: Can't load font from file '%s', error 0x%x\n",
> 			        //filename, error);
633d612
< 		/*DPRINTF("Nano-X-Freetype2: Loading font from file \"%s\"\n", filename); */
638c617
< 			EPRINTF("Nano-X-Freetype2: Can't load font from memory - %x\n", error);
---
> 			EPRINTF("freetype2_createfont_internal: Can't load font from memory, error 0x%x\n", error);
641d619
< 		/*DPRINTF("Nano-X-Freetype2: Loading font from memory\n"); */
646c624
< 		EPRINTF("freetype2_createfont: no unicode map table - %x\n", error);
---
> 		EPRINTF("freetype2_createfont_internal: No unicode map table, error 0x%x\n", error);
651,653c629,631
< 	GdSetFontSize((PMWFONT) pf, height);
< 	GdSetFontRotation((PMWFONT) pf, 0);
< 	GdSetFontAttr((PMWFONT) pf, 0, 0);
---
> 	pf->fontprocs->SetFontSize((PMWFONT)pf, height, width);
> 	pf->fontprocs->SetFontRotation((PMWFONT)pf, 0);
> 	pf->fontprocs->SetFontAttr((PMWFONT)pf, 0, 0);
657d634
< 	/*DPRINTF("freetype2_createfont_internal(): testing\n");*/
661,662c638
< 	error = FTC_Manager_Lookup_Size(freetype2_cache_manager,
< 	    &(pf->font), &face, &size);
---
> 	error = FTC_Manager_Lookup_Size(freetype2_cache_manager, &pf->font, &face, &size);
667c643
< 		EPRINTF("Nano-X-Freetype2: Freetype 2 error %x trying to load font.\n", error);
---
> 		//EPRINTF("freetype2_createfont_internal: error 0x%x trying to load font.\n", error);
675,677c651,653
< #if ! HAVE_FREETYPE_2_CACHE
<       out:
< 	if (pf->face != NULL) {
---
> #if !HAVE_FREETYPE_2_CACHE
> out:
> 	if (pf->face != NULL)
679d654
< 	}
697c672
< #if ! HAVE_FREETYPE_2_CACHE
---
> #if !HAVE_FREETYPE_2_CACHE
699d673
< 
734c708
< freetype2_duplicate(PMWFONT psrcfont, MWCOORD height)
---
> freetype2_duplicate(PMWFONT psrcfont, MWCOORD height, MWCOORD width)
741c715
< 	if (height == 0) {
---
> 	if (height == 0)
743c717,718
< 	}
---
> 	if (width == 0)
> 		width = pf->fontsize;
749,750c724
< 		/* Stored in faceid, which is effectively static.  No need
< 		 * to copy. */
---
> 		/* Stored in faceid, which is effectively static.  No need to copy. */
759,760c733
< 		pnewf = freetype2_createfont_internal(pf->faceid, filename,
< 						      height);
---
> 		pnewf = freetype2_createfont_internal(pf->faceid, filename, height, width);
768,769c741
< 		pnewf = freetype2_createfont_internal(pf->faceid, NULL,
< 						      height);
---
> 		pnewf = freetype2_createfont_internal(pf->faceid, NULL, height, width);
776,779c748,750
< 	GdSetFontAttr((PMWFONT) pnewf, pf->fontattr, 0);
< 	GdSetFontRotation((PMWFONT) pnewf, pf->fontrotation);
< 
< 	return (PMWFONT) pnewf;
---
> 	pnewf->fontprocs->SetFontAttr((PMWFONT)pnewf, pf->fontattr, 0);
> 	pnewf->fontprocs->SetFontRotation((PMWFONT)pnewf, pf->fontrotation);
> 	return (PMWFONT)pnewf;
790c761
< freetype2_setfontsize(PMWFONT pfont, MWCOORD fontsize)
---
> freetype2_setfontsize(PMWFONT pfont, MWCOORD height, MWCOORD width)
798c769,770
< 	pf->fontsize = fontsize;
---
> 	pf->fontsize = height;
> 	//pf->fontwidth = width;		//FIXME
800,801c772,773
< 	/* allow create font with height=0*/
< 	if (!fontsize)
---
> 	/* allow create font with zero height or width*/
> 	if (!height)
805,806c777,778
< 	pixel_height = fontsize;
< 	pixel_width = fontsize;
---
> 	pixel_height = height;
> 	pixel_width = width;
832c804
< 	if ((tenthdegrees < 0) || (tenthdegrees >= 3600)) {
---
> 	if (tenthdegrees < 0 || tenthdegrees >= 3600) {
834c806
< 		if (tenthdegrees < 0) {
---
> 		if (tenthdegrees < 0)
836d807
< 		}
870c841
< static void
---
> int
873,874c844,845
< #if HAVE_FREETYPE_2_CACHE
< 	PMWFREETYPE2FONT pf = (PMWFREETYPE2FONT) pfont;
---
> 	PMWFREETYPE2FONT pf = (PMWFREETYPE2FONT)pfont;
> 	int oldattr = pf->fontattr;
876c847,850
< 	assert(pf);
---
> 	assert(pfont);
> 
> 	pfont->fontattr &= ~clrflags;
> 	pfont->fontattr |= setflags;
877a852
> #if HAVE_FREETYPE_2_CACHE
881c856
< 		pf->imagedesc.flags |= (FT_LOAD_MONOCHROME | FT_LOAD_TARGET_MONO);
---
> 		pf->imagedesc.flags |= FT_LOAD_MONOCHROME | FT_LOAD_TARGET_MONO;
883c858
< 	pf->imagedesc.type = ((pf->fontattr & MWTF_ANTIALIAS)? ftc_image_grays: ftc_image_mono);
---
> 	pf->imagedesc.type = (pf->fontattr & MWTF_ANTIALIAS)? ftc_image_grays: ftc_image_mono;
885,887d859
< #else
< 	/* No cache.  Nothing to do, just check paramater is valid. */
< 	assert(pfont);
888a861,862
> 
> 	return oldattr;
912,917c886,887
< freetype2_get_glyph_size(PMWFREETYPE2FONT pf,
<                          FT_Face face,
<                          int glyph_index,
<                          int *padvance,
<                          int *pascent,
<                          int *pdescent)
---
> freetype2_get_glyph_size(PMWFREETYPE2FONT pf, FT_Face face, int glyph_index,
> 	int *padvance, int *pascent, int *pdescent)
929,931c899
< 		error = FTC_SBitCache_Lookup(freetype2_cache_sbit,
< 					     &(pf->imagedesc),
< 					     glyph_index, &sbit, NULL);
---
> 		error = FTC_SBitCache_Lookup(freetype2_cache_sbit, &pf->imagedesc, glyph_index, &sbit, NULL);
964d931
< 			
996,1001c963,964
< freetype2_get_char_size(PMWFREETYPE2FONT pf,
<                         FT_Face face,
<                         int ch,
<                         int *padvance,
<                         int *pascent,
<                         int *pdescent)
---
> freetype2_get_char_size(PMWFREETYPE2FONT pf, FT_Face face, int ch,
> 	int *padvance, int *pascent, int *pdescent)
1003a967
> 
1028,1031d991
< #if MW_FEATURE_DO_NOT_TRUST_FONT_ASCENT_AND_DESCENT
< 	int font_ascent;
< 	int font_descent;
< #endif
1040,1041c1000
< 	error = FTC_Manager_Lookup_Size(freetype2_cache_manager,
< 					&(pf->font), &face, &size);
---
> 	error = FTC_Manager_Lookup_Size(freetype2_cache_manager, &pf->font, &face, &size);
1046c1005
< 		EPRINTF("Freetype 2 error 0x%x getting font info.\n", error);
---
> 		EPRINTF("Freetype2 error 0x%x getting font info.\n", error);
1054,1055c1013,1014
< 	bbox = &(face->bbox);
< 	metrics = &(size->metrics);
---
> 	bbox = &face->bbox;
> 	metrics = &size->metrics;
1057,1060c1016,1017
< 	if (!FT_IS_SCALABLE(face)) {
< 		/* FIXME */
< 		return FALSE;
< 	}
---
> 	if (!FT_IS_SCALABLE(face))
> 		return FALSE; // FIXME
1064,1072c1021,1023
< 
< 	pfontinfo->maxascent =
< 		ROUND_26_6_TO_INT(FT_MulFix(bbox->yMax, metrics->y_scale));
< 	pfontinfo->maxdescent =
< 		ROUND_26_6_TO_INT(FT_MulFix(-bbox->yMin, metrics->y_scale));
< 
< 	pfontinfo->fixed =
< 		((face->face_flags & FT_FACE_FLAG_FIXED_WIDTH) != 0);
< 
---
> 	pfontinfo->maxascent = ROUND_26_6_TO_INT(FT_MulFix(bbox->yMax, metrics->y_scale));
> 	pfontinfo->maxdescent = ROUND_26_6_TO_INT(FT_MulFix(-bbox->yMin, metrics->y_scale));
> 	pfontinfo->fixed = ((face->face_flags & FT_FACE_FLAG_FIXED_WIDTH) != 0);
1091c1042
< 	/* FIXME: Following are hacks... */
---
> 	// FIXME: Following are hacks
1096a1048
> 
1098,1101c1050
< 		{
< 			/* Error - assume default */
< 			pfontinfo->widths[ch] = pfontinfo->maxwidth;
< 		}
---
> 			pfontinfo->widths[ch] = pfontinfo->maxwidth; /* Error - assume default */
1103,1104d1051
< 		{
< 			/* OK, found the value. */
1106,1107c1053
< 		}
< 		//EPRINTF("pfontinfo->widths[%d]=%d\n", i, pfontinfo->widths[i]);
---
> 		//DPRINTF("pfontinfo->widths[%d]=%d\n", i, pfontinfo->widths[i]);
1125c1071
< static void
---
> void
1127c1073
< 		   const void *text, int cc, MWTEXTFLAGS flags)
---
> 	const void *text, int cc, MWTEXTFLAGS flags)
1141,1142c1087
< 	driver_gc_t blit_instructions;
< 	int blit_op;
---
> 	MWBLITPARMS parms;
1145d1089
< 	assert(psd);
1147,1148c1091
< 
< 	//DPRINTF("Nano-X-Freetype2: freetype2_drawtext(x=%d, y=%d) called\n", ax, ay);
---
> 	assert(psd); // note in STANDALONE case, 'app_t' is passed as psd, must not inspect pointer!
1154c1097
< 	error = FTC_Manager_Lookup_Size(freetype2_cache_manager, &(pf->font), &face, &size);
---
> 	error = FTC_Manager_Lookup_Size(freetype2_cache_manager, &pf->font, &face, &size);
1159c1102
< 		EPRINTF("Freetype 2 error 0x%x getting font for drawtext.\n", error);
---
> 		EPRINTF("Freetype2 error 0x%x getting font for drawtext.\n", error);
1169,1182c1112,1128
< 	/* Initialize the parts of blit_instructions we won't change */
< 	blit_instructions.fg_color = gr_foreground;
< 	blit_instructions.bg_color = gr_background;
< 	blit_instructions.usebg = gr_usebg;
< 	blit_instructions.srcx = 0;
< 	blit_instructions.srcy = 0;
< 	blit_instructions.dst_linelen = 0;	/* Unused. */
< 
< 	// FIXME: don't use antialias settings if no alphacol driver
< 	if ((pf->fontattr & MWTF_ANTIALIAS) /**&& (psd->flags & PSF_HAVEOP_ALPHACOL)**/)
< 		blit_op = PSDOP_ALPHACOL;
< 	else
< 		blit_op = PSDOP_BITMAP_BYTES_MSB_FIRST;
< 	blit_instructions.op = blit_op;
---
> 	/* Initialize blit parms we won't change*/
> 	parms.fg_color = gr_foreground;
> 	parms.bg_color = gr_background;
> 	parms.usebg = gr_usebg;
> 	parms.srcx = 0;
> 	parms.srcy = 0;
> 	parms.dst_pitch = 0;		/* set later in GdConversionBlit*/
> 	parms.data_out = 0;			/* set later in GdConversionBlit*/
> 
> 	// FIXME: don't use antialias settings if no alphacol driver (psd->flags & PSF_HAVEOP_ALPHACOL)
> 	if (pf->fontattr & MWTF_ANTIALIAS) {
> 		parms.data_format = MWIF_8BPP | MWIF_HASALPHA;	/* data is 8bpp alpha channel*/
> 		parms.op = MWROP_BLENDFGBG;				/* blend fg/bg with alpha channel -> dst*/
> 	} else {
> 		parms.data_format = MWIF_MONOBYTEMSB;	/* data is 1bpp bytes, msb first*/
> 		parms.op = MWROP_COPY;					/* copy to dst, 1=fg (0=bg if usebg)*/
> 	}
1186a1133
> printf("ASC %d DESC %ld\n", (abs(size->metrics.descender) + 63) >> 6, (size->metrics.ascender + 63) >> 6);
1193a1141
> 	/* Use slow routine for rotated text or cache not supported*/
1196c1144
< 	    || 1	/* FIXME display broken when cache disabled*/
---
> 	    || 1						/* FIXME display broken when cache disabled*/
1201,1202c1149,1151
< 	   ) {
< 		/* Use slow routine for rotated text */
---
> 	   )
> 	{
> 		/* non-cache drawtext routine*/
1205,1206c1154,1187
< 		FT_Render_Mode render_mode = (blit_op == PSDOP_ALPHACOL)?
< 			ft_render_mode_normal: ft_render_mode_mono;
---
> 		FT_Render_Mode render_mode = (parms.data_format & MWIF_MONO)?
> 			FT_RENDER_MODE_MONO: FT_RENDER_MODE_NORMAL;
> 
> 		// duplicated from below for the cache disabled mode which is broken FIXME
> #if FILL_BACKGROUND_ON_USEBG
> 		/*
> 		 * Pre-clear entire text box background when alpha blending
> 		 * and 'use background' is TRUE.
> 		 * The glyph box background pixels will also be drawn again in
> 		 * GdConvertBlit.
> 		 */
> 		if (gr_usebg && pf->fontrotation == 0) {
> 			MWCOORD fnt_h, fnt_w, fnt_b;
> #if STANDALONE
> 			/* fill to gr_background color*/
> 			MWPIXELVAL gr_save = winsetfgcolor(psd, gr_background);	
> #else
> 			MWPIXELVAL gr_save = gr_background;
> 			gr_foreground = gr_background;
> #endif
> 
> 			pfont->fontprocs->GetTextSize(pfont, text, cc, flags, &fnt_w, &fnt_h, &fnt_b);
> 
> 			ay -= pos.y >> 6;
> 			GdFillRect(psd, ax, ay-fnt_b, fnt_w, fnt_h);
> 			ay += pos.y >> 6;
> 
> #if STANDALONE
> 			winsetfgcolor(psd, gr_save);
> #else
> 			gr_foreground = gr_save;
> #endif
> 		}
> #endif /* FILL_BACKGROUND_ON_USEBG*/
1208d1188
< 		/*DPRINTF("Nano-X-Freetype2: freetype2_drawtext() using SLOW routine\n"); */
1216,1217c1196,1198
< 				//DPRINTF("Nano-X-Freetype2: freetype2_drawtext(): kerning_delta.x=%d, /64=%d\n", (int)kerning_delta.x, (int)kerning_delta.x/64);
< 				pos.x += kerning_delta.x & (~63);
---
> 				//DPRINTF("freetype2_drawtext(): kerning_delta.x=%d, /64=%d\n",
> 				//(int)kerning_delta.x, (int)kerning_delta.x/64);
> 				pos.x += kerning_delta.x & ~63;
1221,1224c1202
< 			/* FIXME: Should use an image cache to optimize
< 			 * rendering of rotated text.
< 			 */
< 
---
> 			/* FIXME: Should use an image cache to optimize rendering of rotated text */
1233c1211
< 			// translate the glyph image now..
---
> 			/* translate the glyph image*/
1236c1214,1215
< 			//DPRINTF("Nano-X-Freetype2: freetype2_drawtext(): glyph->advance.x=%d, >>16=%d\n", (int)glyph->advance.x, (int)glyph->advance.x>>16);
---
> 			//DPRINTF("freetype2_drawtext(): glyph->advance.x=%d, >>16=%d\n",
> 			//(int)glyph->advance.x, (int)glyph->advance.x>>16);
1238c1217
< 			pos.x += (glyph->advance.x >> 10) & (~63);
---
> 			pos.x += (glyph->advance.x >> 10) & ~63;
1240,1243c1219,1220
< 			//if (pf->fontrotation) {
< 				// rotate the glyph image now..
< 				FT_Glyph_Transform(glyph, &pf->matrix, 0);
< 			//}
---
> 			/* rotate the glyph image*/
> 			FT_Glyph_Transform(glyph, &pf->matrix, 0);
1245,1246c1222
< 			// convert glyph image to bitmap
< 			//
---
> 			/* convert glyph to bitmap image*/
1254,1260c1230,1237
< 				blit_instructions.dstx = ax + bitmapglyph->left;
< 				blit_instructions.dsty = ay - bitmapglyph->top;
< 				blit_instructions.width = bitmap->width;
< 				blit_instructions.height = bitmap->rows;
< 				blit_instructions.src_linelen = bitmap->pitch;
< 				blit_instructions.data = bitmap->buffer;
< 				//DPRINTF("Nano-X-Freetype2: freetype2_draw_bitmap_%s(ax=%d, ay=%d, gl->l=%d, gl->t=%d)\n", ((pf->fontattr & MWTF_ANTIALIAS) ? "alpha" : "mono"), ax, ay, bitmapglyph->left, bitmapglyph->top);
---
> 				parms.dstx = ax + bitmapglyph->left;
> 				parms.dsty = ay - bitmapglyph->top;
> 				parms.width = bitmap->width;
> 				parms.height = bitmap->rows;
> 				parms.src_pitch = bitmap->pitch;
> 				parms.data = bitmap->buffer;
> 				//DPRINTF("freetype2_draw_bitmap(ax=%d, ay=%d, gl->l=%d, gl->t=%d)\n",
> 				// ax, ay, bitmapglyph->left, bitmapglyph->top);
1262,1263c1239,1240
< 				if (blit_instructions.width > 0 && blit_instructions.height > 0)
< 					GdDrawAreaInternal(psd, &blit_instructions);
---
> 				if (parms.width > 0 && parms.height > 0)
> 					GdConversionBlit(psd, &parms);
1279,1280c1256
< 		ay -= (pos.y >> 6);
< 		startx = ax;
---
> 		ay -= pos.y >> 6;
1281a1258
> 		startx = ax;
1284,1285c1261,1266
< 		/* clear background area if usebg set*/
< 		/* this is done again in alphacol drawarea driver, but only for char box*/
---
> 		/*
> 		 * Pre-clear entire text box background when alpha blending
> 		 * and 'use background' is TRUE.
> 		 * The glyph box background pixels will also be drawn again in
> 		 * GdConvertBlit.
> 		 */
1288c1269,1275
< 			MWPIXELVAL gr_save = gr_foreground;
---
> #if STANDALONE
> 			/* fill to gr_background color*/
> 			MWPIXELVAL gr_save = winsetfgcolor(psd, gr_background);	
> #else
> 			MWPIXELVAL gr_save = gr_background;
> 			gr_foreground = gr_background;
> #endif
1290c1277
< 			freetype2_gettextsize(pfont, text, cc, flags, &fnt_w, &fnt_h, &fnt_b);
---
> 			pfont->fontprocs->GetTextSize(pfont, text, cc, flags, &fnt_w, &fnt_h, &fnt_b);
1292,1293d1278
< 			// kluge must set gr_foreground for GdFillRect as we need clipping
< 			gr_foreground = gr_background;
1294a1280,1283
> 
> #if STANDALONE
> 			winsetfgcolor(psd, gr_save);
> #else
1296d1284
< 		}
1297a1286,1287
> 		}
> #endif /* FILL_BACKGROUND_ON_USEBG*/
1304c1294
< 				ax += (kerning_delta.x >> 6);
---
> 				ax += kerning_delta.x >> 6;
1309c1299
< 			error = FTC_SBitCache_Lookup(freetype2_cache_sbit, &(pf->imagedesc), curchar, &sbit, NULL);
---
> 			error = FTC_SBitCache_Lookup(freetype2_cache_sbit, &pf->imagedesc, curchar, &sbit, NULL);
1313,1318c1303,1308
< 			blit_instructions.dstx = ax + sbit->left;
< 			blit_instructions.dsty = ay - sbit->top;
< 			blit_instructions.width = sbit->width;
< 			blit_instructions.height = sbit->height;
< 			blit_instructions.src_linelen = sbit->pitch;
< 			blit_instructions.data = sbit->buffer;
---
> 			parms.dstx = ax + sbit->left;
> 			parms.dsty = ay - sbit->top;
> 			parms.width = sbit->width;
> 			parms.height = sbit->height;
> 			parms.src_pitch = sbit->pitch;
> 			parms.data = sbit->buffer;
1322c1312
< 			error = FT_Load_Glyph(face, curchar, (blit_op == PSDOP_ALPHACOL)?
---
> 			error = FT_Load_Glyph(face, curchar, (parms.data_format & MWIF_MONO)?
1327,1334c1317,1323
< 			bitmap = &(face->glyph->bitmap);
< 
< 			blit_instructions.dstx = ax + face->glyph->bitmap_left;
< 			blit_instructions.dsty = ay - face->glyph->bitmap_top;
< 			blit_instructions.width = bitmap->width;
< 			blit_instructions.height = bitmap->rows;
< 			blit_instructions.src_linelen = bitmap->pitch;
< 			blit_instructions.data = bitmap->buffer;
---
> 			bitmap = &face->glyph->bitmap;
> 			parms.dstx = ax + face->glyph->bitmap_left;
> 			parms.dsty = ay - face->glyph->bitmap_top;
> 			parms.width = bitmap->width;
> 			parms.height = bitmap->rows;
> 			parms.src_pitch = bitmap->pitch;
> 			parms.data = bitmap->buffer;
1340c1329
< 			ax += (face->glyph->advance.x >> 6);
---
> 			ax += face->glyph->advance.x >> 6;
1342,1343c1331,1332
< 			if (blit_instructions.width > 0 && blit_instructions.height > 0)
< 				GdDrawAreaInternal(psd, &blit_instructions);
---
> 			if (parms.width > 0 && parms.height > 0)
> 				GdConversionBlit(psd, &parms);
1366,1369c1355,1356
< freetype2_gettextsize_rotated(PMWFREETYPE2FONT pf,
<                               const void *text, int cc,
<                               MWCOORD * pwidth, MWCOORD * pheight,
<                               MWCOORD * pbase)
---
> freetype2_gettextsize_rotated(PMWFREETYPE2FONT pf, const void *text, int cc,
> 	MWCOORD *pwidth, MWCOORD *pheight, MWCOORD *pbase)
1391,1392c1378
< 	error = FTC_Manager_Lookup_Size(freetype2_cache_manager,
< 					&(pf->font), &face, &size);
---
> 	error = FTC_Manager_Lookup_Size(freetype2_cache_manager, &pf->font, &face, &size);
1397c1383
< 		EPRINTF("Freetype 2 error 0x%x getting font info.\n", error);
---
> 		EPRINTF("Freetype2 error 0x%x getting font info.\n", error);
1409d1394
< 
1414,1417d1398
< 
< 	/*
< 	 * Starting point
< 	 */
1425,1426c1406
< 			FT_Get_Kerning(face, last_glyph_code, curchar,
< 				       ft_kerning_default, &kerning_delta);
---
> 			FT_Get_Kerning(face, last_glyph_code, curchar, ft_kerning_default, &kerning_delta);
1432,1434c1412
< 		/* FIXME: Should use an image cache to optimize
< 		 * rendering of rotated text.
< 		 */
---
> 		/* FIXME: Should use an image cache to optimize rendering of rotated text*/
1443,1444c1421,1422
< 		//DPRINTF("Nano-X-Freetype2: freetype2_gettextsize(): glyph '%c' at %d,%d, advance=%d\n",
< 		//       str[i], (pos.x>>6), (pos.y>>6), (glyph->advance.x >> 16));
---
> 		/*DPRINTF("freetype2_gettextsize: glyph '%c' at %d,%d, advance=%d\n",
> 		       str[i], pos.x>>6, pos.y>>6, glyph->advance.x >> 16);*/
1446c1424
< 		// translate the glyph image now..
---
> 		/* translate the glyph image now..*/
1449c1427
< 		pos.x += (glyph->advance.x >> 10) & (~63);
---
> 		pos.x += (glyph->advance.x >> 10) & ~63;
1456c1434
< 		if (i == 0) {
---
> 		if (i == 0)
1458,1464c1436,1441
< 		} else {
< 			FT_Glyph_Get_CBox(glyph, ft_glyph_bbox_pixels,
< 					  &glyph_bbox);
< 
< 			//DPRINTF("Nano-X-Freetype2: freetype2_gettextsize(): glyph cbox (%d,%d)-(%d,%d)\n",
< 			//        (glyph_bbox.xMin/*>>6*/), (glyph_bbox.yMin/*>>6*/),
< 			//        (glyph_bbox.xMax/*>>6*/), (glyph_bbox.yMax/*>>6*/));
---
> 		else {
> 			FT_Glyph_Get_CBox(glyph, ft_glyph_bbox_pixels, &glyph_bbox);
> 
> 			//DPRINTF("freetype2_gettextsize: glyph cbox (%d,%d)-(%d,%d)\n",
> 			//		(glyph_bbox.xMin/*>>6*/), (glyph_bbox.yMin/*>>6*/),
> 			//		(glyph_bbox.xMax/*>>6*/), (glyph_bbox.yMax/*>>6*/));
1480c1457
< 		//DPRINTF("Nano-X-Freetype2: freetype2_gettextsize(): total cbox (%d,%d)-(%d,%d)\n",
---
> 		//DPRINTF("freetype2_gettextsize: total cbox (%d,%d)-(%d,%d)\n",
1488,1489c1465
< 	//DPRINTF("Nano-X-Freetype2: freetype2_gettextsize(): numchars = %d, w = %d, h = %d, base = %d\n",
< 	//        cc, *pwidth, *pheight, *pbase);
---
> 	//DPRINTF("freetype2_gettextsize_rotated: width %d, height %d, base %d\n", *pwidth, *pheight, *pbase);
1508,1511c1484,1485
< freetype2_gettextsize_fast(PMWFREETYPE2FONT pf,
<                            const void *text, int char_count,
<                            MWCOORD * pwidth, MWCOORD * pheight,
<                            MWCOORD * pbase)
---
> freetype2_gettextsize_fast(PMWFREETYPE2FONT pf, const void *text, int char_count,
> 	MWCOORD * pwidth, MWCOORD * pheight, MWCOORD * pbase)
1533,1534c1507
< 	error = FTC_Manager_Lookup_Size(freetype2_cache_manager,
< 					&(pf->font), &face, &size);
---
> 	error = FTC_Manager_Lookup_Size(freetype2_cache_manager, &pf->font, &face, &size);
1539,1540c1512
< 		EPRINTF("Freetype 2 error 0x%x getting font info.\n",
< 			error);
---
> 		EPRINTF("Freetype2 error 0x%x getting font info.\n", error);
1551,1557c1523
< 	use_kerning = ((pf->fontattr & MWTF_KERNING)
< 			   && FT_HAS_KERNING(face));
< 
< 
< 	/*
< 	 * Starting point
< 	 */
---
> 	use_kerning = (pf->fontattr & MWTF_KERNING) && FT_HAS_KERNING(face);
1566,1568c1532
< 			FT_Get_Kerning(face, last_glyph_code, cur_glyph_code,
< 					   ft_kerning_default,
< 					   &kerning_delta);
---
> 			FT_Get_Kerning(face, last_glyph_code, cur_glyph_code, ft_kerning_default, &kerning_delta);
1570c1534
< 			/*EPRINTF("Nano-X-Freetype2: freetype2_gettextsize(): %d + kerning %d (delta was %d unscaled).\n",
---
> 			/*DPRINTF("freetype2_gettextsize_fast: %d + kerning %d (delta was %d unscaled).\n",
1572c1536
< 			total_advance += (kerning_delta.x >> 6);
---
> 			total_advance += kerning_delta.x >> 6;
1591,1592c1555
< 	/*EPRINTF("Nano-X-Freetype2: freetype2_gettextsize(): numchars = %d, w = %d, h = %d, base = %d\n",
< 	   cc, *pwidth, *pheight, *pbase); */
---
> 	//DPRINTF("freetype2_gettextsize_fast: width %d, height %d, base %d\n", *pwidth, *pheight, *pbase);
1607c1570
< static void
---
> void
1609c1572
< 		      MWCOORD * pwidth, MWCOORD * pheight, MWCOORD * pbase)
---
> 	MWCOORD * pwidth, MWCOORD * pheight, MWCOORD * pbase)
1618a1582
> 	/* use slower routine for rotated text or non-cached*/
1623,1627c1587,1590
< 		) {
< 		/* Use slow routine for rotated text */
< 		/* EPRINTF("Nano-X-Freetype2: freetype2_gettextsize() using SLOW routine\n"); */
< 		freetype2_gettextsize_rotated(pf, text, cc, pwidth, pheight, pbase);
< 	} else {
---
> 	   )
> 	{
> 		freetype2_gettextsize_rotated(pf, text, cc, pwidth, pheight, pbase);	/* slower*/
> 	} else
1629d1591
< 	}
